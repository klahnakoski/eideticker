# encoding: utf-8
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Author: Kyle Lahnakoski (kyle@lahnakoski.com)
#

from __future__ import unicode_literals
from util.cnv import CNV
from util.collections import reverse
from util.env.logs import Log
from util.queries import windows, Q
from welchs_ttest import welchs_ttest

entropies = [4.989581808861076, 5.064426400979757, 5.014564045137374, 4.984364278170482, 5.00425616531406, 5.016558561104198, 5.0366350652672445, 4.948167694555852, 4.9892157148166545,
    5.192063149366924, 5.005788798027799, 4.990532326321859, 4.989691823245617, 5.194704179516094, 4.989227853259563, 4.993613978170332, 4.955504455325914, 5.0411516125007925, 5.020857731098612,
    4.981323434701142, 5.210965557557406, 4.942501422651571, 5.011511113820382, 4.980958910182712, 4.989971426785354, 5.050947682235622, 5.0156683158833175, 5.2152576602137, 4.999256185977055,
    5.009466827372494, 5.008497064698458, 4.998780008255542, 5.006726261301381, 4.940492639924037, 4.989021399244895, 5.030348758785199, 5.202465690189136, 4.994559874368434, 4.9995310136290465,
    5.2060633088485355, 5.0355233912885256, 5.141655320089119, 4.961072008370474, 5.119786429619993, 4.934656184013913, 4.898170282789855, 4.83294137962324, 4.731132268419057, 4.817050309354632,
    4.826848128893557, 4.718683485565243, 4.727554482206718, 4.6658756373937855, 4.643985126385631, 4.652644014101421, 4.593768278442099, 4.753671929481182, 4.636881487209591, 4.754131574545948,
    4.662865188184091, 4.656689844549726, 4.665947072922886, 4.6562573801921125, 4.393652925797295, 4.662504514560831, 4.740876498543705, 4.464247755576698, 4.739516195018967, 4.654872197586011,
    4.756552861269549, 4.694929341411576, 4.648274036858921, 4.499574272409469, 4.656730471256801, 4.7523037586692105, 4.629692610223759, 4.659504220710376, 4.749254384730566, 4.538363999744726,
    4.106383145397159, 3.972974299741164, 3.8665904006589193, 3.996750139720075, 3.938005826314192, 3.962409080625796, 4.013662992245826, 3.953823483182541, 3.985278801894092, 4.178250620473712,
    4.211053344673828, 4.180982547987266, 4.204433365312373, 4.225385549970993, 4.220312580338632, 4.2414203080296495, 4.205448378221008, 4.23929263954559, 4.212874844904442, 4.238894013576742,
    4.214138140006875, 4.246136760853181, 4.203873304117228, 4.235391390795822, 4.361252507729366, 4.256661448218736, 4.219992852800938, 4.204869735857841, 4.2406887570643255, 4.226498608936532,
    4.24309872277076, 4.246600590428627, 4.236222267852236, 4.264156501511342, 4.180769319075417, 4.237266973735566, 4.242571504444348, 4.243775185437151, 4.343773552652146, 4.227655385972499,
    4.190672306612385, 4.380811181071156, 4.665985472914865, 4.783091697707172, 4.7940934460500095, 4.735178809410385, 4.789745086727149, 4.776957029425929, 4.782639253629081, 4.791708011674202,
    4.774849676983534, 4.91481271259722, 4.764778844656278, 4.785249675618453, 4.732843688040767, 4.796015247199846, 4.7865297390269586, 4.78905947319832, 4.79587884187246, 4.897223931015626,
    4.801982193059371, 4.7822523379302195, 4.800935381444088, 4.837403638426204, 4.784850432687871, 4.627943473378643, 4.805319554765023, 4.734596896915711, 4.781538436458373, 4.786025086874464,
    4.781644797980171, 4.777442393100885, 4.778224392317906, 4.776841146680214, 4.7339808944010295, 4.793384057767413, 4.768853185603573, 4.801568279067611, 4.669673665711228, 4.76789848583979,
    4.66350542647189, 4.7919511738711265, 4.801479499769846, 4.721678625965548, 4.765542341484047, 4.820804583438452, 4.82228538130252, 4.765864186417973, 4.798877048254346, 4.713517939996854,
    4.798607657355858, 4.797111583080553, 4.781019647879589, 4.765231405613315, 4.801089506801742, 4.792322229981095, 4.765762110288645, 4.822946861892136, 4.755213052839596, 4.799936488305292,
    4.802710798841172, 4.77853324147996, 4.814282553102897, 4.7118996005208675, 4.793150262642001, 4.730835392856327, 4.794216229134317, 4.757577001841466, 4.901903081664217, 4.798193157617278,
    4.7819401966078345, 4.781351091282536, 4.822373502885651, 4.840374767314283, 4.780891604065065, 4.819374451396828, 4.778178396064579, 4.790178419000871, 4.845822911342804, 4.794352479193241,
    4.798654829636968, 4.793448969401561, 4.900750078484177, 4.796500636206805, 4.800440125653254, 4.784859412473893, 4.79546194898183, 4.764599646919974, 4.797266759328939, 4.84420619527368,
    4.799708397725785, 4.734253125057875, 4.734027465652431, 4.83630437175297, 4.8170826924297785, 4.767796755218249, 4.80175969183982, 4.765884023619711, 4.819365956821523, 4.7831071729002765,
    4.848414201765827, 4.776729692038976, 4.796088700445459, 4.726603521513497, 4.780394705212675, 4.7881890452379166, 4.802350699949018, 4.79230404567407, 4.767008334783737, 4.797045060107558,
    4.816352547931305, 4.761942311472276, 4.72751545310263, 4.834551943275634, 4.732868178212572, 4.792776053225745, 4.78711690655253, 4.797809424548622, 4.800227852467629, 4.7685966537324465,
    4.764986231807256, 4.794922010839723, 4.7923173777981605, 4.82804484221946, 4.918433112497963, 4.736428243811921, 4.676488299362626, 4.8978299632069255, 4.896574922476372, 4.769367058940918,
    4.915813653565417, 4.796560303654752, 4.71069612520674, 4.767699732024749, 4.76485985558996, 4.799454651445615, 4.794261979883214, 4.81465403594949, 4.797836665437709, 4.800050179810868,
    4.789716775851533, 4.831340038824098, 4.779825224034582, 4.78009207141629, 4.793147021444156, 4.8041531034406795, 4.781623195523016, 4.82949695354739, 4.765438212179468, 4.7558778688148236,
    4.747273242235969, 4.781535345346597, 4.786835104305862, 4.802098558768932, 4.7664505369756425, 4.801388536081724, 4.733531970547858, 4.781810302578871, 4.730384060233842, 4.7872385648744595,
    4.7761184270274395, 4.770252327257923, 4.797631053627719, 4.799712812058302, 4.903065361913165, 4.791548024517443, 4.797721718060225, 4.796848182290515, 4.767912897332778, 4.792179464951898,
    4.792171980302342, 4.733542493217945, 4.764152887941085, 4.836573928563189, 4.800455084333724, 4.7355285027581395, 4.797683612007453, 4.793221642883685, 4.737902179668671, 4.772763732095366,
    4.797032409904509, 4.8000420847957095, 4.913076613960938, 4.764956008672145, 4.788293983151389, 4.798850962383027, 4.778836654570812, 4.730701445944644, 4.782819572707507, 4.772731330665718,
    4.803254137048241, 4.914281037560998, 4.827626187421398, 4.787384023089526, 4.7797740838455836, 4.799082994879937, 4.740573922717693, 4.763552864337023, 4.79356011621139, 4.765487489202082,
    4.782797454470817, 4.790744262456034, 4.80082488759549, 4.789805077170239, 4.79801515784972, 4.797486221241561, 4.794850019816366, 4.725877883000968, 4.7980889849055535, 4.724110870697424,
    4.801398842483672, 4.789951560668702, 4.788205294772717, 4.780701388245026, 4.834304271303063, 4.7346303588580225, 4.768368815354197
]

# waves = numpy.fft.fft(avg)
# abs_waves = [abs(w) for w in waves]
#
# Log.start()
# Log.note(CNV.object2JSON(abs_waves[:256:]))
# Log.stop()

results = Q.run({
    "from": {
        "from": [{"entropy": e} for e in entropies],
        "window": [{
            "name": "before",
            "value": lambda r: r.entropy,
            "aggregate": windows.Stats(),
            "range": {"min": -20, "max": 0}
        }, {
            "name": "after",
            "value": lambda r: r.entropy,
            "aggregate": windows.Stats(),
            "range": {"min": 0, "max": 20}
        }, {
            "name": "confidence",
            "value": lambda r: welchs_ttest(r.before, r.after).confidence
        }]
    },
    "select": ["entropy", "confidence", {"name": "before", "value": "before.mean"}, {"name": "after", "value": "after.mean"}]
})


# GO BACKWARDS AND FIND THE FIRST PEAK (THAT'S BEYOND A CERTAIN THRESHOLD)
maximum = 0.0
stop = -1
for i, r in enumerate(reverse(results)):
    if r.confidence > 3:
        if r.confidence > maximum:
            maximum = r.confidence
        else:
            stop = len(results) - i
            break

Log.start()
Log.note(CNV.list2tab(results))
Log.note("Action stopped at: {{stop}}", {"stop": stop})
Log.stop()
